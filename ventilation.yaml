---
substitutions:
  device: ventilation
  name: Ventilatie
  reboot_timeout: 7d
  threshold: '15'

esphome:
  name: ${device}
  platform: ESP8266
  board: esp01_1m
  board_flash_mode: dout
  on_boot:
    - script.execute: shutdown

wifi:
  ssid: !secret home_wifi_ssid
  password: !secret home_wifi_password
  fast_connect: true
  reboot_timeout: ${reboot_timeout}
  ap:
    ssid: ${device}
    password: !secret api_password

api:
  password: !secret api_password
  reboot_timeout: ${reboot_timeout}

logger:
  level: INFO

ota:

web_server:

status_led:
  pin:
    number: GPIO15

globals:
  - id: activated
    type: bool
    restore_value: true
    initial_value: 'false'

script:
  - id: shutdown
    then:
      - if:
          condition:
            lambda: return id(activated) && id(fan).state;
          then:
            - wait_until:
                sensor.in_range:
                  id: power
                  below: ${threshold}
            - delay: 30min
            - switch.turn_off: fan
            - lambda: id(activated) = false;
          else:
            - lambda: id(activated) = false;

sensor:
  - platform: wifi_signal
    name: ${name} WiFi Signal
  - platform: uptime
    id: uptime
  - platform: hlw8012
    sel_pin: 5
    cf_pin: 14
    cf1_pin: 13
    current:
      name: ${name} Current
      icon: mdi:current-ac
    voltage:
      name: ${name} Voltage
      icon: mdi:flash
    power:
      id: power
      name: ${name} Power
      icon: mdi:power-plug
      on_value_range:
        - above: ${threshold}
          then:
            - script.stop: shutdown
            - lambda: id(activated) = true;
            - script.execute: shutdown

text_sensor:
  - platform: version
    name: ${name} ESPHome Version
  - platform: template
    name: ${name} Uptime
    icon: mdi:timer
    lambda: |-
      int up = id(uptime).state;
      char result[16];
      sprintf(result, "%dd %02d:%02d:%02d", up / 86400, (up % 86400) / 3600,
                                            (up % 3600) / 60, up % 60);
      return std::string(result);

binary_sensor:
  - platform: status
    name: ${name} Status
  - platform: gpio
    id: button_1
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
    on_press:
      then:
        - switch.toggle: fan
  - platform: template
    name: ${name} Activated
    lambda: return id(activated);

output:
  - platform: gpio
    pin: GPIO12
    id: relay_1

switch:
  - platform: restart
    name: ${name} Restart
  - platform: output
    name: ${name}
    icon: mdi:fan
    output: relay_1
    id: fan
    on_turn_off:
      - script.stop: shutdown
      - lambda: id(activated) = false;
  - platform: template
    name: ${name} Auto Poweroff
    icon: mdi:timer-off
    lambda: return id(activated);
    turn_on_action:
      - lambda: id(activated) = true;
      - script.execute: shutdown
    turn_off_action:
      - script.stop: shutdown
      - lambda: id(activated) = false;
